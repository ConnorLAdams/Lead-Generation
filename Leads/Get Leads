{
    "createdAt": "2025-04-17T05:10:40.306Z",
    "updatedAt": "2025-04-24T04:22:32.000Z",
    "id": "8QjnnJwx4MQXLwa9",
    "name": "Get Leads",
    "active": false,
    "nodes": [
        {
            "parameters": {
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "typeVersion": 1.1,
            "position": [
                0,
                0
            ],
            "id": "9c6c2353-102f-4d2e-a60c-3dd8702aef3d",
            "name": "When chat message received",
            "webhookId": "c8dc5880-0150-4672-84f5-43c24af1a519"
        },
        {
            "parameters": {
                "options": {
                    "systemMessage": "=# Overview\nYou are the personal assistant that excels at web scraping. Your job is to\nsend the user's query to the correct tool.\n\n## Tools\n- google_maps_web_scraper: Use this tool to web scrape Google Maps. You'll want to aggregate all the results together and send a list back to the user.\n\n-linkedin_web_scraper: Use this tool to web scrape Linkedin.\nYou'll want to aggregate all the results together and send a list back to\nthe user.\n\n- apollo_web_scraper: Use this tool to web scrape Apollo. You'll want to aggregate all the results together and send a list back to the user.\n\nIf the user asks you to scrape multiple sources, please combine them all in\none output. If the user doesn't specify a specific source, then scrape them all. Please include details in your response such as Emails, Phone Numbers, Linkedin links, website urls, company description, and any other contact information.\n\nFor each of the items you list, specify which scraper you retrieved the information from\n\n## Workflow inputs\n- search: plase insert the industry. For example: Landscaping, or Grocery Store\n- location: please insert the city. For example: Toronto, or Los Angeles\n- state: please insert the state/province code uppercase. For example: NY,\nCA\n- country: please insert the country code, lower case. For example: ca, or\nus"
                }
            },
            "type": "@n8n/n8n-nodes-langchain.agent",
            "typeVersion": 1.8,
            "position": [
                220,
                0
            ],
            "id": "f3e34e92-0957-47ac-a0d5-e0c9d4171359",
            "name": "AI Agent"
        },
        {
            "parameters": {
                "model": {
                    "__rl": true,
                    "value": "o3-mini",
                    "mode": "list",
                    "cachedResultName": "o3-mini"
                },
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "typeVersion": 1.2,
            "position": [
                -220,
                320
            ],
            "id": "89f723b2-ff84-4c5c-bb43-8d8e99286eef",
            "name": "OpenAI Chat Model",
            "credentials": {
                "openAiApi": {
                    "id": "VQkxJojR7CzPADuj",
                    "name": "OpenAi account"
                }
            }
        },
        {
            "parameters": {},
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "typeVersion": 1.3,
            "position": [
                260,
                320
            ],
            "id": "9f49eddb-63fd-416c-89f2-34c0d99f535e",
            "name": "Simple Memory"
        },
        {
            "parameters": {
                "name": "google_maps_web_scraper",
                "description": "Call this tool when the user wants to scrape google maps.",
                "workflowId": {
                    "__rl": true,
                    "value": "j3RqtHnEg6QWma5W",
                    "mode": "list",
                    "cachedResultName": "Leads \u2014 Scrape Google Maps"
                },
                "workflowInputs": {
                    "mappingMode": "defineBelow",
                    "value": {
                        "search": "={{ $fromAI(\"industry\", \"This is the industry that we are going to be using to webscrape from Google Maps\") }}",
                        "country": "={{ $fromAI(\"country\", \"This is the country that we are going to be using to webscrape from Google Maps\") }}",
                        "location": "={{ $fromAI(\"city\", \"This is the city that we are going to be using to webscrape from Google Maps\") }}",
                        "state": "={{ $fromAI(\"state\", \"This is the state that we are going to be using to webscrape from Google Maps\") }}"
                    },
                    "matchingColumns": [],
                    "schema": [
                        {
                            "id": "search",
                            "displayName": "search",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "location",
                            "displayName": "location",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "state",
                            "displayName": "state",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "country",
                            "displayName": "country",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        }
                    ],
                    "attemptToConvertTypes": false,
                    "convertFieldsToString": false
                }
            },
            "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
            "typeVersion": 2.1,
            "position": [
                460,
                320
            ],
            "id": "3772447c-4b19-430f-924f-da421c11491a",
            "name": "Google Maps"
        },
        {
            "parameters": {
                "name": "linkedin_web_scraper",
                "description": "Call this tool when the user wants to scrape Linkedin.",
                "workflowId": {
                    "__rl": true,
                    "value": "nwFqFjca0DQXFY5N",
                    "mode": "list",
                    "cachedResultName": "Leads \u2014 Get Leads from Linkedin"
                },
                "workflowInputs": {
                    "mappingMode": "defineBelow",
                    "value": {
                        "search": "={{ $fromAI(\"industry\", \"This is the industry that we are going to be using to webscrape from Linkein\") }}",
                        "location": "={{ $fromAI(\"city\", \"This is the city that we are going to be using to webscrape from Linkedin. Make sure the city is spelt out and not abreviated\") }}",
                        "country": "={{ $fromAI(\"country\", \"This is the country that we are going to be using to webscrape from Linkedin. Make sure the country is spelt out and not abreviated. Example: United States of America\") }}",
                        "state": "={{ $fromAI(\"state\", \"This is the state that we are going to be using to webscrape from Linkedin. Make sure the state is spelt out and not abreviated\") }}",
                        "limit": "={{ $fromAI(\"limit\", \"This is the max results to return from the scrape. If there isn't a limit specified, set it to 50\") }}"
                    },
                    "matchingColumns": [],
                    "schema": [
                        {
                            "id": "search",
                            "displayName": "search",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "location",
                            "displayName": "location",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "state",
                            "displayName": "state",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "country",
                            "displayName": "country",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "limit",
                            "displayName": "limit",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "number",
                            "removed": false
                        }
                    ],
                    "attemptToConvertTypes": false,
                    "convertFieldsToString": false
                }
            },
            "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
            "typeVersion": 2.1,
            "position": [
                580,
                320
            ],
            "id": "c37138cb-5b83-4bbf-b7f7-66ac7ceb806d",
            "name": "Linkedin"
        },
        {
            "parameters": {
                "name": "apollo_web_scraper",
                "description": "Call this tool when the user wants to scrape Apollo.",
                "workflowId": {
                    "__rl": true,
                    "value": "VFCR6BxExceGOWXK",
                    "mode": "list",
                    "cachedResultName": "Leads \u2014 Scrape Apollo"
                },
                "workflowInputs": {
                    "mappingMode": "defineBelow",
                    "value": {
                        "limit": "={{ $fromAI(\"limit\", \"This is the max results to return from the scrape. If there isn't a limit specified, set it to 500\") }}",
                        "country": "={{ $fromAI(\"country\", \"This is the country that we are going to be using to webscrape from Apollo. Make sure the country is spelt out and not abreviated. Example: United States of America\") }}",
                        "state": "={{ $fromAI(\"state\", \"This is the state that we are going to be using to webscrape from Apollo. Make sure the state is spelt out and not abreviated\") }}",
                        "location": "={{ $fromAI(\"city\", \"This is the city that we are going to be using to webscrape from Linkedin. Make sure the city is spelt out and not abreviated\") }}",
                        "search": "={{ $fromAI(\"industry\", \"This is the industry that we are going to be using to webscrape from Apollo\") }}"
                    },
                    "matchingColumns": [],
                    "schema": [
                        {
                            "id": "search",
                            "displayName": "search",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "location",
                            "displayName": "location",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "state",
                            "displayName": "state",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "country",
                            "displayName": "country",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "string"
                        },
                        {
                            "id": "limit",
                            "displayName": "limit",
                            "required": false,
                            "defaultMatch": false,
                            "display": true,
                            "canBeUsedToMatch": true,
                            "type": "number"
                        }
                    ],
                    "attemptToConvertTypes": false,
                    "convertFieldsToString": false
                }
            },
            "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
            "typeVersion": 2.1,
            "position": [
                680,
                320
            ],
            "id": "aa03f5eb-241d-4423-bb7d-f94ba84a7979",
            "name": "Apollo"
        },
        {
            "parameters": {
                "model": "grok-2-1212",
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.lmChatXAiGrok",
            "typeVersion": 1,
            "position": [
                80,
                320
            ],
            "id": "5f602c4e-402e-4aa3-a47b-962b0f9cea61",
            "name": "xAI Grok Chat Model",
            "credentials": {
                "xAiApi": {
                    "id": "I5LW0rhixggU6PDg",
                    "name": "xAi account"
                }
            }
        }
    ],
    "connections": {
        "When chat message received": {
            "main": [
                [
                    {
                        "node": "AI Agent",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "OpenAI Chat Model": {
            "ai_languageModel": [
                [
                    {
                        "node": "AI Agent",
                        "type": "ai_languageModel",
                        "index": 0
                    }
                ]
            ]
        },
        "Simple Memory": {
            "ai_memory": [
                [
                    {
                        "node": "AI Agent",
                        "type": "ai_memory",
                        "index": 0
                    }
                ]
            ]
        },
        "Google Maps": {
            "ai_tool": [
                [
                    {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                    }
                ]
            ]
        },
        "Linkedin": {
            "ai_tool": [
                [
                    {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                    }
                ]
            ]
        },
        "Apollo": {
            "ai_tool": [
                [
                    {
                        "node": "AI Agent",
                        "type": "ai_tool",
                        "index": 0
                    }
                ]
            ]
        },
        "xAI Grok Chat Model": {
            "ai_languageModel": [
                []
            ]
        }
    },
    "settings": {
        "executionOrder": "v1"
    },
    "staticData": null,
    "meta": {
        "templateCredsSetupCompleted": true
    },
    "pinData": {},
    "versionId": "b0411e94-c015-44d7-a389-64eb199dbb27",
    "triggerCount": 2,
    "tags": []
}